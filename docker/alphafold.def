Bootstrap: docker
From: nvidia/cuda:12.2.2-cudnn8-runtime-ubuntu20.04

%post
    # Set non-interactive frontend for apt
    export DEBIAN_FRONTEND=noninteractive
    
    # Update and install system packages
    apt-get update --quiet
    apt-get install --no-install-recommends --yes --quiet \
        build-essential \
        cmake \
        cuda-command-line-tools-12-2 \
        git \
        hmmer \
        kalign \
        tzdata \
        wget
    rm -rf /var/lib/apt/lists/*
    apt-get autoremove --yes
    apt-get clean
    
    # Compile HHsuite from source
    git clone --branch v3.3.0 --single-branch https://github.com/soedinglab/hh-suite.git /tmp/hh-suite
    mkdir /tmp/hh-suite/build
    cd /tmp/hh-suite/build
    cmake -DCMAKE_INSTALL_PREFIX=/opt/hhsuite ..
    make --jobs 4
    make install
    ln -s /opt/hhsuite/bin/* /usr/bin
    cd /
    rm -rf /tmp/hh-suite
    
    # Install Miniconda
    wget -q -P /tmp https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda
    rm /tmp/Miniconda3-latest-Linux-x86_64.sh
    
    # Set up conda paths
    export PATH="/opt/conda/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
    
    # Install Conda packages
    /opt/conda/bin/conda install --quiet --yes conda==24.11.1 pip python=3.11
    /opt/conda/bin/conda install --quiet --yes --channel nvidia cuda-toolkit=12.2.2 cuda-runtime=12.2.2
    /opt/conda/bin/conda install --quiet --yes --channel conda-forge openmm=8.0.0 pdbfixer
    /opt/conda/bin/conda clean --all --force-pkgs-dirs --yes
    
    # Create app directory
    mkdir -p /app/alphafold
    
    # Download stereo_chemical_props.txt
    wget -q -P /app/alphafold/alphafold/common/ \
        https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt
    
    # Add SETUID bit to ldconfig
    chmod u+s /sbin/ldconfig.real
    
    # Create symbolic link for libffi
    ln -sf /usr/lib/x86_64-linux-gnu/libffi.so.7 /opt/conda/lib/libffi.so.7
    
    # Create run script
    echo '#!/bin/bash
ldconfig
python /app/alphafold/run_alphafold.py "$@"' > /app/run_alphafold.sh
    chmod +x /app/run_alphafold.sh

%files
    # Copy the entire alphafold directory into the container
    # Note: You'll need to adjust the source path based on where you're building from
    . /app/alphafold
    # Copy test scripts for CUDA validation
    /nfs/ml_lab/projects/ml_lab/cepi/alphafold/CEPI/test_scripts /app/test_scripts

%post
    # Install pip packages after files are copied
    export PATH="/opt/conda/bin:$PATH"
    /opt/conda/bin/pip3 install --upgrade pip --no-cache-dir
    /opt/conda/bin/pip3 install -r /app/alphafold/requirements.txt --no-cache-dir
    # Install JAX with CUDA 12.2 compatibility (avoid newer PTX versions)
    /opt/conda/bin/pip3 install --upgrade --no-cache-dir \
        jax==0.4.23 \
        jaxlib==0.4.23+cuda12.cudnn89 \
        -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
    
    # Set up test scripts
    chmod +x /app/test_scripts/*.py
    chmod +x /app/test_scripts/*.sh

%environment
    export PATH="/opt/conda/bin:/opt/hhsuite/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
    export PYTHONPATH="/app/alphafold:$PYTHONPATH"
    # CUDA compatibility settings
    export CUDA_FORCE_PTX_JIT=1
    export XLA_FLAGS="--xla_gpu_force_compilation_parallelism=1"

%runscript
    exec /app/run_alphafold.sh "$@"

%labels
    Author DeepMind Technologies Limited
    Version alphafold-singularity
    Description AlphaFold protein structure prediction system

%help
    This is a Singularity container for AlphaFold.
    
    To run AlphaFold:
    singularity run --nv alphafold.sif [alphafold arguments]
    
    The --nv flag is required to enable GPU support.