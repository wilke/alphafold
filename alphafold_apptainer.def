Bootstrap: docker
From: nvidia/cuda:12.2.2-cudnn8-runtime-ubuntu22.04

%post
    # Set non-interactive frontend for apt
    export DEBIAN_FRONTEND=noninteractive
    
    # Update and install system packages
    apt-get update --quiet
    apt-get install --no-install-recommends --yes --quiet --allow-change-held-packages \
        build-essential \
        cmake \
        cuda-command-line-tools-12-2 \
        git \
        hmmer \
        kalign \
        tzdata \
        wget \
        python3.11 \
        python3.11-dev \
        python3.11-venv \
        libcudnn8 \
        libcudnn8-dev
    rm -rf /var/lib/apt/lists/*
    apt-get autoremove --yes
    apt-get clean
    
    # Compile HHsuite from source
    git clone --branch v3.3.0 --single-branch https://github.com/soedinglab/hh-suite.git /tmp/hh-suite
    mkdir /tmp/hh-suite/build
    cd /tmp/hh-suite/build
    cmake -DCMAKE_INSTALL_PREFIX=/opt/hhsuite ..
    make --jobs 4
    make install
    ln -s /opt/hhsuite/bin/* /usr/bin
    cd /
    rm -rf /tmp/hh-suite
    
    # Install Miniconda
    wget -q -P /tmp https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda
    rm /tmp/Miniconda3-latest-Linux-x86_64.sh
    
    # Set up conda paths
    export PATH="/opt/conda/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
    
    # Install Conda packages
    /opt/conda/bin/conda install --quiet --yes conda==24.11.1 pip python=3.11
    /opt/conda/bin/conda install --quiet --yes --channel conda-forge openmm=8.0.0 pdbfixer
    /opt/conda/bin/conda clean --all --force-pkgs-dirs --yes
    
    # Create app directory
    mkdir -p /app/alphafold
    
    # Download stereo_chemical_props.txt
    wget -q -P /app/alphafold/alphafold/common/ \
        https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt
    
    # Add SETUID bit to ldconfig
    chmod u+s /sbin/ldconfig.real
    
    # Create symbolic link for libffi
    ln -sf /usr/lib/x86_64-linux-gnu/libffi.so.7 /opt/conda/lib/libffi.so.7
    
    # Create run script
    echo '#!/bin/bash
ldconfig 2>/dev/null || true
python /app/alphafold/run_alphafold.py "$@"' > /app/run_alphafold.sh
    chmod +x /app/run_alphafold.sh

%files
    # Copy the entire alphafold directory into the container
    . /app/alphafold

%post
    # Install pip packages after files are copied
    export PATH="/opt/conda/bin:$PATH"
    export PYTHONNOUSERSITE=1
    
    # Upgrade pip
    /opt/conda/bin/pip install --upgrade pip
    
    # Install specific numpy version from requirements
    /opt/conda/bin/pip install numpy==1.24.3
    
    # Install JAX with specific CUDA support
    /opt/conda/bin/pip install --upgrade \
        jax==0.4.26 \
        jaxlib==0.4.26+cuda12.cudnn89 \
        -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
    
    # Install other requirements
    /opt/conda/bin/pip install -r /app/alphafold/requirements.txt --no-deps
    
    # Reinstall with deps to catch any missing
    /opt/conda/bin/pip install -r /app/alphafold/requirements.txt
    
    # Create test script
    cat > /app/test_alphafold.py << 'EOF'
#!/opt/conda/bin/python
import sys
print("Testing AlphaFold dependencies...")

try:
    import numpy as np
    print(f"✓ NumPy {np.__version__}")
    
    import jax
    print(f"✓ JAX {jax.__version__}")
    devices = jax.devices()
    print(f"  Devices: {devices}")
    
    import tensorflow as tf
    print(f"✓ TensorFlow {tf.__version__}")
    
    import alphafold
    print("✓ AlphaFold module imported successfully")
    
    print("\nAll dependencies loaded successfully!")
    
except Exception as e:
    print(f"✗ Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
EOF
    chmod +x /app/test_alphafold.py

%environment
    export PATH="/opt/conda/bin:/opt/hhsuite/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/lib:/usr/local/cuda-12.2/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
    export PYTHONPATH="/app/alphafold:$PYTHONPATH"
    export PYTHONNOUSERSITE=1
    
    # CUDA settings
    export CUDA_HOME="/usr/local/cuda-12.2"
    export XLA_FLAGS="--xla_gpu_cuda_data_dir=/usr/local/cuda-12.2"
    export XLA_PYTHON_CLIENT_PREALLOCATE=false
    export TF_FORCE_GPU_ALLOW_GROWTH=true

%runscript
    exec /app/run_alphafold.sh "$@"

%labels
    Author DeepMind Technologies Limited / AlphaFold Apptainer Conversion
    Version alphafold-apptainer-v1
    Description AlphaFold protein structure prediction system in Apptainer

%help
    This is an Apptainer container for AlphaFold.
    
    To run AlphaFold:
    apptainer run --nv alphafold.sif \
      --fasta_paths=<path_to_fasta> \
      --max_template_date=2022-01-01 \
      --db_preset=<reduced_dbs|full_dbs> \
      --model_preset=<monomer|monomer_casp14|monomer_ptm|multimer> \
      --data_dir=<path_to_databases> \
      --output_dir=<output_path>
    
    To test the installation:
    apptainer exec --nv alphafold.sif /app/test_alphafold.py
    
    The --nv flag is required to enable GPU support.